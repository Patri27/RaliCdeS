'use strict';

const express = require('express');
const bodyParser = require('body-parser');
const routes = require('./routes');

const app = express();
let server = null;
app.use(bodyParser.json());

app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header(
    'Access-Control-Allow-Methods',
    'PUT, POST, PATCH, GET, DELETE,OPTIONS'
  );
  res.header(
    'Access-Control-Allow-Headers',
    'Origin, X-Requested-With, Content-Type, Accept, Authorization'
  );
  next();
});

/**
 * Add all routes
 */
app.use('/api', routes.adminRouter);
app.use('/api', routes.accountRouter);
app.use('/api', routes.sharedRouter);
app.use('/api', routes.userRouter);


app.use('*', (req, res, next) => res.status(404).send({ message: 'Esta pÃ¡gina no existe.' }));

/**
 * Special route middleware to catch all next(err) generated by controllers
 */
app.use((err, req, res, next) => {
  if (err.name === 'ValidationError') {
    return res.status(400).send(err);
  }

  if (err.name === 'AuthenticatedError') {
    return res.status(401).send();
  }

  return res.status(500).send({
    message: err.message,
  });
});

/**
 * Start listening requests at a given port
 * @param {Number} port
 */
async function listen(port) {
  if (server === null) {
    server = await app.listen(port);
  } else {
    throw new Error("Can't listen, server already initialized");
  }
}

/**
 * Stop listening requests
 */
async function close() {
  try {
    if (server) {
      await server.close();
      server = null;
    } else {
      throw new Error("Can't close a non started server");
    }
  } catch (e) {
    console.log(e.message);
  }
}

module.exports = {
  listen,
  close,
};
